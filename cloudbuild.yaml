steps:

# Build Docker Image
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'build',
      '-t',
      'asia-south1-docker.pkg.dev/ci-cd-467305/ml-models/iris-model:latest',
      '.'
    ]

# Push Docker Image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push',
      'asia-south1-docker.pkg.dev/ci-cd-467305/ml-models/iris-model:latest'
    ]

# Run Docker Container to Train Model and Save Output
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'run',
      '--rm',
      '-v',
      '/workspace/models/:/app/models',
      'asia-south1-docker.pkg.dev/ci-cd-467305/ml-models/iris-model:latest'
    ]

# Copy Trained Model to GCS Bucket
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args:
    - -c
    - |
      echo "Uploading trained model to GCS..."
      gsutil cp -r /workspace/models gs://ml-cicd-bucket/models

# Upload the Container Image to Vertex AI model
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args:
    - -c
    - |
      echo "Registering model to Vertex AI..."
      gcloud ai models upload \
        --region=asia-south1 \
        --display-name=iris-classifier \
        --container-image-uri=asia-south1-docker.pkg.dev/ci-cd-467305/ml-models/iris-model:latest

# Deploy the model to Vertex AI Endpoint
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args:
    - -c
    - |
      echo "Fetching model ID..."
      MODEL_ID=$(gcloud ai models list --region=asia-south1 --filter="displayName=iris-classifier" --format="value(name)")

      echo "Checking if endpoint exists..."
      # Assign Cloud Build substitution to a bash variable
      ENDPOINT_NAME_VAR="${_ENDPOINT_NAME}" # This line is correct as is

      # Escape the $ when using the bash variable in gcloud commands within the multiline string
      # This tells Cloud Build to pass "$ENDPOINT_NAME_VAR" literally to bash
      # where bash will then expand it.
      ENDPOINT_ID=$(gcloud ai endpoints list --region=asia-south1 --filter="displayName=$${ENDPOINT_NAME_VAR}" --format="value(name)")

      if [ -z "${ENDPOINT_ID}" ]; then
        echo "Creating new endpoint..."
        ENDPOINT_ID=$(gcloud ai endpoints create --region=asia-south1 --display-name=$${ENDPOINT_NAME_VAR} --format="value(name)")
      fi

      echo "Deploying model to endpoint..."
      gcloud ai endpoints deploy-model "${ENDPOINT_ID}" \
        --model="${MODEL_ID}" \
        --region=asia-south1 \
        --display-name="iris-v1" \
        --traffic-split=0=100 \
        --container-port=8080 \
        --enable-access-logging

      echo "Model deployed to endpoint: ${ENDPOINT_ID}"

options:
  substitutionOption: ALLOW_LOOSE

# Define the substitution variable here
substitutions:
  _ENDPOINT_NAME: "iris-endpoint"

images:
  - 'asia-south1-docker.pkg.dev/ci-cd-467305/ml-models/iris-model:latest'

logsBucket: 'gs://ml-cicd-bucket/logs'